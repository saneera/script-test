apiVersion: v1
kind: Template
metadata:
  name: strimzi-persistent
  annotations:
    openshift.io/display-name: "Apache Kafka (Persistent storage)"
    description: >-
      This template installs Apache Zookeeper and Apache Kafka clusters.
    tags: "messaging,datastore"
    iconClass: "fa fa-share-alt fa-flip-horizontal"
    template.openshift.io/documentation-url: "https://strimzi.io"
message: "Kafka cluster ${CLUSTER_NAME} is being deployed. Use '${CLUSTER_NAME}-kafka-bootstrap:9092' as bootstrap server in your application."
parameters:
  - description: All Kubernetes resources will be named after the cluster name
    displayName: Name of the cluster
    name: CLUSTER_NAME
    value: my-cluster
  - description: Number of Zookeeper cluster nodes which will be deployed (odd number of nodes is recommended)
    displayName: Number of Zookeeper cluster nodes (odd number of nodes is recommended)
    name: ZOOKEEPER_NODE_COUNT
    required: true
    value: "3"
  - description: Number of Kafka cluster nodes which will be deployed
    displayName: Number of Kafka cluster nodes
    name: KAFKA_NODE_COUNT
    required: true
    value: "3"
  - description: The Kafka version to use for this cluster.
    displayName: The Kafka version to use
    name: KAFKA_VERSION
    required: true
    value: "2.4.0"
  - description: Volume space available for Zookeeper data, e.g. 512Mi, 2Gi.
    displayName: Zookeeper Volume Capacity
    name: ZOOKEEPER_VOLUME_CAPACITY
    required: true
    value: 4Gi
  - description: Volume space available for Kafka data, e.g. 512Mi, 2Gi.
    displayName: Kafka Volume Capacity
    name: KAFKA_VOLUME_CAPACITY
    required: true
    value: 10Gi
  - description: Number of seconds after the container has started before healthcheck probes are initiated.
    displayName: Zookeeper healthcheck initial delay
    name: ZOOKEEPER_HEALTHCHECK_DELAY
    value: "15"
  - description: Number of seconds after which the probe times out.
    displayName: Zookeeper healthcheck timeout
    name: ZOOKEEPER_HEALTHCHECK_TIMEOUT
    value: "5"
  - description: Number of seconds after the container has started before healthcheck probes are initiated.
    displayName: Kafka healthcheck initial delay
    name: KAFKA_HEALTHCHECK_DELAY
    value: "15"
  - description: Number of seconds after which the probe times out.
    displayName: Kafka healthcheck timeout
    name: KAFKA_HEALTHCHECK_TIMEOUT
    value: "5"
  - description: Default replication factor for newly created topics
    displayName: Default replication factor
    name: KAFKA_DEFAULT_REPLICATION_FACTOR
    value: "1"
  - description: Replication factor for offsets topic
    displayName: Offsets replication factor
    name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
    value: "3"
  - description: Replication factor for transactions state log topic
    displayName: Transaction state replication factor
    name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
    value: "3"
  - description: Valid Issuer Url for OAuth 2.0 Authentication
    displayName: Issuer Url
    name: VALID_ISSUER_URL
    value: "keycloak.keycloak:8443"
  - description: JWKS Endpoint for OAuth 2.0 Authentication
    displayName: JWKS Endpoint
    name: JWKS_ENDPOINT
    value: "keycloak.keycloak:8443"
  - description: Kafka Client ID
    displayName: Kafka Client ID
    name: KAFKA_CLIENT_ID
    value: "kafka-broker"
  - description: Kafka Client Secret
    displayName: Kafka Client Secret
    name: KAFKA_SECRET
    value: "broker-oauth-secret"
  - description: CA Trust Store
    displayName: CA Trust Store
    name: CA_TRUST
    value: "ca-truststore"
  - description: CA Certificate
    displayName: CA Certificate
    name: CA_CERT
    value: "ca.crt"

objects:
  - apiVersion: kafka.strimzi.io/v1beta1
    kind: Kafka
    metadata:
      name: ${CLUSTER_NAME}
    spec:
      kafka:
        version: ${{KAFKA_VERSION}}
        replicas: ${{KAFKA_NODE_COUNT}}
        logging:
          type: inline
          loggers:
            log4j.logger.io.strimzi: "DEBUG"
        listeners:
          plain: {}
          tls: {}
          external:
            type: loadbalancer
            authentication:
              type: oauth
              clientId: ${KAFKA_CLIENT_ID}
              clientSecret:
                key: secret
                secretName: ${KAFKA_SECRET}
              validIssuerUri: ${VALID_ISSUER_URL}
              jwksEndpointUri: {JWKS_ENDPOINT}
              userNameClaim: preferred_username
              disableTlsHostnameVerification: true
              tlsTrustedCertificates:
                - secretName: ${CA_TRUST}
                  certificate: ${CA_CERT}
        livenessProbe:
          initialDelaySeconds: ${{KAFKA_HEALTHCHECK_DELAY}}
          timeoutSeconds: ${{KAFKA_HEALTHCHECK_TIMEOUT}}
        readinessProbe:
          initialDelaySeconds: ${{KAFKA_HEALTHCHECK_DELAY}}
          timeoutSeconds: ${{KAFKA_HEALTHCHECK_TIMEOUT}}
        storage:
          type: ephemeral
        config:
          default.replication.factor: ${KAFKA_DEFAULT_REPLICATION_FACTOR}
          offsets.topic.replication.factor: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
          transaction.state.log.replication.factor: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
          log.message.format.version: ${KAFKA_VERSION}
      zookeeper:
        replicas: ${{ZOOKEEPER_NODE_COUNT}}
        livenessProbe:
          initialDelaySeconds: ${{ZOOKEEPER_HEALTHCHECK_DELAY}}
          timeoutSeconds: ${{ZOOKEEPER_HEALTHCHECK_TIMEOUT}}
        readinessProbe:
          initialDelaySeconds: ${{ZOOKEEPER_HEALTHCHECK_DELAY}}
          timeoutSeconds: ${{ZOOKEEPER_HEALTHCHECK_TIMEOUT}}
        storage:
          type: ephemeral
      entityOperator:
        topicOperator: {}
        userOperator: {}
